commit 3cf929ab550e3526fcf45d3553b92119120b312f
Author: Abder Benbachir <anis.benbachir@gmail.com>
Date:   Sun Apr 23 11:59:49 2017 -0400

    agg hypergraph tracer

diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index 9b1044e..a920c34 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -40,6 +40,7 @@ obj-$(CONFIG_NOP_TRACER) += trace_nop.o
 obj-$(CONFIG_STACK_TRACER) += trace_stack.o
 obj-$(CONFIG_MMIOTRACE) += trace_mmiotrace.o
 obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += trace_functions_graph.o
+obj-$(CONFIG_FUNCTION_GRAPH_TRACER) += trace_hypergraph.o
 obj-$(CONFIG_TRACE_BRANCH_PROFILING) += trace_branch.o
 obj-$(CONFIG_BLK_DEV_IO_TRACE) += blktrace.o
 ifeq ($(CONFIG_BLOCK),y)
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 0533049..52663e2 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -1400,6 +1400,16 @@ int is_tracing_stopped(void)
 	return global_trace.stop_count;
 }
 
+int is_default_bootup_tracer(const char* name)
+{
+    if (!default_bootup_tracer)
+        return 0;
+    
+    if (strncmp(default_bootup_tracer, name, MAX_TRACER_SIZE) != 0)
+        return 0;
+    return 1;
+}
+
 /**
  * tracing_start - quick start of the tracer
  *
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index d261201..7dcf87c0 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -591,6 +591,7 @@ void tracing_start_cmdline_record(void);
 void tracing_stop_cmdline_record(void);
 int register_tracer(struct tracer *type);
 int is_tracing_stopped(void);
+int is_default_bootup_tracer(const char* name);
 
 loff_t tracing_lseek(struct file *file, loff_t offset, int whence);
 
diff --git a/kernel/trace/trace_hypergraph.c b/kernel/trace/trace_hypergraph.c
new file mode 100644
index 0000000..160a028
--- /dev/null
+++ b/kernel/trace/trace_hypergraph.c
@@ -0,0 +1,335 @@
+/*
+ *
+ * Hypergraph : Function graph tracer specific for virtual machine.
+ * Instead of using the buffer we send function entry & exit and
+ * sched_switch events through hypercalls.
+ *
+ * Copyright (c) 2018-2017 Abderrahmane Benbachir <abderrahmane.benbachir@polymtl.ca>
+ * Mostly inspired from function_graph and function tracers which is Copyright (c)
+ * Steven Rostedt <srostedt@redhat.com> and Frederic Weisbecker <fweisbec@gmail.com>
+ *
+ */
+#include <linux/uaccess.h>
+#include <linux/ftrace.h>
+#include <linux/interrupt.h>
+#include <linux/slab.h>
+#include <linux/fs.h>
+#include <trace/events/sched.h>
+#include <asm/setup.h>
+
+#include "trace.h"
+
+#define HYPERGRAPH_SCHED_SWITCH_HYPERCALL_NR 1001
+#define HYPERGRAPH_HYPERCALL_NR 1000
+#define FUNCTION_ENTRY 0
+#define FUNCTION_EXIT 1
+
+#define do_hypercall(nr, p1, p2, p3, p4) \
+__asm__ __volatile__(".byte 0x0F,0x01,0xC1\n"::"a"(nr), \
+	"b"(p1), \
+	"c"(p2), \
+	"d"(p3), \
+	"S"(p4))
+
+static int bootup_tracing_enabled;
+
+/* When set, irq functions will be traced */
+static int hypergraph_irqs_enabled;
+
+static unsigned int max_depth;
+
+static struct trace_array *hypergraph_array;
+
+static struct tracer_opt trace_opts[] = {
+    { } /* Empty entry */
+};
+
+static struct tracer_flags hypergraph_flags = {
+    .val = 0,  /* By default: all flags disabled */
+    .opts = trace_opts
+};
+
+static inline int ftrace_hypergraph_ignore_irqs(void)
+{
+    if (hypergraph_irqs_enabled /*|| trace_recursion_test(TRACE_IRQ_BIT)*/)
+		return 0;
+
+    return irq_count();
+}
+
+static void probe_sched_switch(void *ignore,
+           struct task_struct *prev, struct task_struct *next)
+{
+    /*
+     * Do hypercall to send sched_switch event to host
+     */
+    if(hypergraph_array->function_enabled)
+        do_hypercall(HYPERGRAPH_SCHED_SWITCH_HYPERCALL_NR,
+                     prev->pid,
+                     prev->tgid,
+                     next->pid,
+                     next->tgid);
+}
+
+static int trace_hypergraph_entry(struct ftrace_graph_ent *trace)
+{
+//    unsigned long flags;
+
+    if (!hypergraph_array->function_enabled || !ftrace_trace_task(current))
+		return 0;
+
+    /* trace it when it is-nested-in or is a function enabled. */
+    if(!(trace->depth || ftrace_graph_addr(trace->func)) ||
+        (trace->depth < 0) ||
+        (max_depth && trace->depth >= max_depth))
+        return 0;
+
+    if(ftrace_hypergraph_ignore_irqs())
+        return 0;
+
+    /*
+     * Do not trace a function if it's filtered by set_graph_notrace.
+     * Make the index of ret stack negative to indicate that it should
+     * ignore further functions.  But it needs its own ret stack entry
+     * to recover the original index in order to continue tracing after
+     * returning from the function.
+     */
+    if (ftrace_graph_notrace_addr(trace->func))
+        return 1;
+
+//    local_irq_save(flags);
+    /*
+     * Do hypercall to send func entry event to host
+     */
+
+    do_hypercall(HYPERGRAPH_HYPERCALL_NR,
+                 trace->func, FUNCTION_ENTRY, irq_count(), trace->depth);
+
+//    local_irq_restore(flags);
+
+    return 1;
+}
+
+static void trace_hypergraph_return(struct ftrace_graph_ret *trace)
+{
+//    unsigned long flags;
+//    local_irq_save(flags);
+    /*
+     * Do hypercall to send func exit event to host
+     */
+    do_hypercall(HYPERGRAPH_HYPERCALL_NR,
+                 trace->func,
+                 FUNCTION_EXIT,
+                 (trace->rettime - trace->calltime),
+                 trace->depth);
+
+//    local_irq_restore(flags);
+}
+
+static int trace_hypergraph_thresh_entry(struct ftrace_graph_ent *trace)
+{
+	if (tracing_thresh)
+		return 1;
+	else
+        return trace_hypergraph_entry(trace);
+}
+
+static void trace_hypergraph_thresh_return(struct ftrace_graph_ret *trace)
+{
+	if (tracing_thresh &&
+	    (trace->rettime - trace->calltime < tracing_thresh))
+		return;
+	else
+        trace_hypergraph_return(trace);
+}
+
+static void hypergraph_trace_start(struct trace_array *tr)
+{
+    hypergraph_array->function_enabled = 1;
+}
+
+static void hypergraph_trace_stop(struct trace_array *tr)
+{
+    hypergraph_array->function_enabled = 0;
+}
+
+static int hypergraph_trace_init(struct trace_array *tr)
+{
+	int ret;
+
+    ret = register_trace_sched_switch(probe_sched_switch, NULL);
+    if (ret) {
+        pr_info("sched trace: Couldn't activate tracepoint"
+            " probe to kernel_sched_switch\n");
+    }
+
+    hypergraph_array = tr;
+
+	if (tracing_thresh)
+        ret = register_ftrace_graph(&trace_hypergraph_thresh_return,
+                        &trace_hypergraph_thresh_entry);
+	else
+        ret = register_ftrace_graph(&trace_hypergraph_return,
+                        &trace_hypergraph_entry);
+
+    pr_info("register_ftrace_graph ret=%d",ret);
+    if (ret)
+		return ret;
+
+    // Enable tracing during bootup
+    if(unlikely(bootup_tracing_enabled == 1)){
+        bootup_tracing_enabled = 0;
+        hypergraph_trace_start(tr);
+    }
+
+	return 0;
+}
+
+static void hypergraph_trace_reset(struct trace_array *tr)
+{
+    tr->function_enabled = 0;
+	unregister_ftrace_graph();
+    unregister_trace_sched_switch(probe_sched_switch, NULL);
+}
+
+static int hypergraph_trace_update_thresh(struct trace_array *tr)
+{
+    hypergraph_trace_reset(tr);
+    return hypergraph_trace_init(tr);
+}
+
+
+static int func_hypergraph_set_flag(struct trace_array *tr, u32 old_flags,
+                                    u32 bit, int set)
+{
+    //set flags
+	return 0;
+}
+
+/**
+ * struct tracer - a specific tracer and its callbacks to interact with tracefs
+ * @name: the name chosen to select it on the available_tracers file
+ * @init: called when one switches to this tracer (echo name > current_tracer)
+ * @reset: called when one switches to another tracer
+ * @start: called when tracing is unpaused (echo 1 > tracing_on)
+ * @stop: called when tracing is paused (echo 0 > tracing_on)
+ * @update_thresh: called when tracing_thresh is updated
+ * @open: called when the trace file is opened
+ * @pipe_open: called when the trace_pipe file is opened
+ * @close: called when the trace file is released
+ * @pipe_close: called when the trace_pipe file is released
+ * @read: override the default read callback on trace_pipe
+ * @splice_read: override the default splice_read callback on trace_pipe
+ * @selftest: selftest to run on boot (see trace_selftest.c)
+ * @print_headers: override the first lines that describe your columns
+ * @print_line: callback that prints a trace
+ * @set_flag: signals one of your private flags changed (trace_options file)
+ * @flags: your private flags
+ */
+static struct tracer hypergraph_trace __tracer_data = {
+	.name		= "hypergraph",
+    .update_thresh	= hypergraph_trace_update_thresh,
+    .init		= hypergraph_trace_init,
+    .reset		= hypergraph_trace_reset,
+    .start      = hypergraph_trace_start,
+    .stop       = hypergraph_trace_stop,
+    .flags		= &hypergraph_flags,
+    .set_flag	= func_hypergraph_set_flag
+};
+
+
+static ssize_t hypergraph_depth_write(struct file *filp, const char __user *ubuf,
+                                      size_t cnt, loff_t *ppos)
+{
+	unsigned long val;
+	int ret;
+
+	ret = kstrtoul_from_user(ubuf, cnt, 10, &val);
+	if (ret)
+		return ret;
+
+	max_depth = val;
+
+	*ppos += cnt;
+
+	return cnt;
+}
+
+static ssize_t hypergraph_depth_read(struct file *filp, char __user *ubuf,
+                                     size_t cnt, loff_t *ppos)
+{
+	char buf[15]; /* More than enough to hold UINT_MAX + "\n"*/
+	int n;
+
+	n = sprintf(buf, "%d\n", max_depth);
+
+	return simple_read_from_buffer(ubuf, cnt, ppos, buf, n);
+}
+
+static const struct file_operations hypergraph_depth_fops = {
+	.open		= tracing_open_generic,
+    .write		= hypergraph_depth_write,
+    .read		= hypergraph_depth_read,
+	.llseek		= generic_file_llseek,
+};
+
+static __init int init_hypergraph_tracefs(void)
+{
+	struct dentry *d_tracer;
+
+	d_tracer = tracing_init_dentry();
+	if (IS_ERR(d_tracer))
+		return 0;
+
+    trace_create_file("max_hypergraph_depth", 0644, d_tracer,
+              NULL, &hypergraph_depth_fops);
+
+	return 0;
+}
+fs_initcall(init_hypergraph_tracefs);
+
+/*
+ * command line interface to allow users to set config on boot up.
+ */
+static __init int set_max_hypergraph_depth(char *str)
+{
+    long val;
+    if (kstrtol(str, 10, &val) == 0)
+        max_depth = val;
+
+    return 1;
+}
+__setup("ftrace_hypergraph_max_depth=", set_max_hypergraph_depth);
+
+static __init int hypergraph_irqs_enable(char *str)
+{
+    long val;
+    if (kstrtol(str, 10, &val) == 0){
+        hypergraph_irqs_enabled = val > 0;
+        pr_info("hypergraph_irqs_enabled = %d\n",hypergraph_irqs_enabled);
+    }
+
+    return 1;
+}
+__setup("ftrace_hypergraph_irqs_enable=", hypergraph_irqs_enable);
+
+static __init int init_hypergraph_trace(void)
+{
+    int ret;
+    do_hypercall(1000,0xffffffffffffff02,0,0,0);
+    bootup_tracing_enabled = is_default_bootup_tracer(hypergraph_trace.name);
+
+    ret = register_tracer(&hypergraph_trace);
+    do_hypercall(1000,0xffffffffffffff02,1,0,0);
+    return ret;
+}
+int early_hypergraph_init_trace(void)
+{
+    pr_info("early_hypergraph_init_trace");
+    int ret;
+    do_hypercall(1000,0xffffffffffffff03,0,0,0);
+    ret = init_hypergraph_trace();
+    do_hypercall(1000,0xffffffffffffff03,1,0,0);
+    return ret;
+}
+//early_initcall(init_hypergraph_trace);
